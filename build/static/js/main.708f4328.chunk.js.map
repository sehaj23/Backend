{"version":3,"sources":["components/common/MyInput.tsx","components/pages/login.tsx","components/common/MyNavBar.tsx","components/common/MyRadioBtn.tsx","components/helper/MyHttp.ts","components/pages/admin/create-admin.tsx","components/pages/home.tsx","components/pages/logout.tsx","components/pages/admin/view-admin.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MyInput","props","Fragment","className","htmlFor","id","label","type","name","value","onChange","placeholder","required","Login","useState","username","setUsername","password","setPassword","loggedIn","setLoggedIn","error","setError","e","a","preventDefault","trim","data","Axios","post","res","status","token","localStorage","setItem","message","useEffect","getItem","to","onSubmit","currentTarget","MyNavBar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","aria-haspopup","aria-labelledby","MyRadioBtn","checked","MyHttp","endpoint","headers","get","CreateAdmin","role","setRole","setMessage","Home","Logout","removeItem","ViewAdmin","setData","console","log","getData","scope","map","d","key","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.708f4328.chunk.js","sourcesContent":["import React from \"react\"\n\nexport interface MyInputI {\n    name?: string\n    value?: string\n    onChange: ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined\n    id?: string\n    label?: string\n    placeholder?: string\n    type?: string\n}\n\nconst MyInput = (props: MyInputI) => {\n\n    return (\n        <React.Fragment>\n            <div className=\"form-group\">\n                <label htmlFor={props.id}>{props.label}:</label>\n                <input type={(props.type) ? props.type : \"text\"} id={props.id} name={props.name} value={props.value} onChange={props.onChange} placeholder={props.placeholder} className=\"form-control\" required />\n            </div>\n            <br />\n        </React.Fragment>\n    )\n}\n\nexport default MyInput\n","import React, { FormEvent, useState, useEffect } from \"react\"\nimport MyInput from \"../common/MyInput\"\nimport Axios from \"axios\"\nimport { Redirect } from \"react-router-dom\"\n\nconst Login = () => {\n\n  const [username, setUsername] = useState()\n  const [password, setPassword] = useState()\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    if (localStorage.getItem(\"token\")) setLoggedIn(true)\n  })\n\n\n  async function login(e: FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    if (username.trim() === '' && password.trim() === '') {\n      setError(\"Enter all details\")\n      return\n    }\n\n    const data = {\n      username,\n      password\n    }\n    try {\n      const res = await Axios.post(\"/api/login\", data)\n      if (res.status === 200) {\n        const token = res.data.token\n        localStorage.setItem(\"token\", token)\n        setLoggedIn(true)\n      } else {\n        setError(res.data.message)\n      }\n\n    } catch (error) {\n      setError(error.message)\n    }\n\n\n  }\n\n  if (loggedIn) {\n    return <Redirect to=\"/home\" />\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron justify-content-md-center\">\n        <h1 className=\"text-center\">Zattire</h1>\n        <form onSubmit={login}>\n          <MyInput label=\"Username\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.currentTarget.value)} />\n          <MyInput label=\"Password\" type=\"password\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value)} />\n          <button type=\"submit\" className=\"btn btn-success\">Submit</button>\n          <p className=\"text-danger\">{error}</p>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login","\nimport React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nconst MyNavBar = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link className=\"navbar-brand\" to=\"/home\">Admin Panel</Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item dropdown\">\n                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Admin\n                        </a>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                        <Link className=\"dropdown-item\" to=\"/admin/create\">Add</Link>\n                        <Link className=\"dropdown-item\" to=\"/admin/view\">Edit</Link>\n\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/logout\">Logout</Link>\n                    </li>\n                </ul>\n\n            </div>\n        </nav>\n    )\n}\n\nexport default MyNavBar","import React from \"react\"\n\nexport interface MyRadioBtnI {\n    name: string\n    checked: boolean\n    label: string\n    value: string\n    onChange: ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined\n}\n\nconst MyRadioBtn = (props: MyRadioBtnI) => {\n\n    return (\n        <div className=\"form-check-inline\">\n            <label className=\"form-check-label\">\n                <input type=\"radio\" onChange={props.onChange} value={props.value} className=\"form-check-input\" name={props.name} checked={props.checked} />{props.label}\n            </label>\n        </div>\n    )\n}\n\nexport default MyRadioBtn","import Axios from \"axios\"\n\n\nexport default class MyHttp {\n\n    static post = (endpoint: string, data: any) => {\n        const token = localStorage.getItem(\"token\")\n        const headers = {\n            \"authorization\": `Bearer ${token}`\n        }\n        \n        return Axios.post(endpoint, data, {\n            headers: headers\n        })\n    }\n\n    static get = (endpoint: string) => {\n        const token = localStorage.getItem(\"token\")\n        const headers = {\n            \"authorization\": `Bearer ${token}`\n        }\n        \n        // return fetch(endpoint, {headers : headers})\n        return Axios.get(endpoint, {\n            headers: headers\n        })\n    }\n\n}","import React, { useState, FormEvent } from \"react\"\nimport Axios from \"axios\"\nimport { AdminI } from \"./admin-interfaces\"\nimport MyInput from \"../../common/MyInput\"\nimport MyNavBar from \"../../common/MyNavBar\"\nimport MyRadioBtn from \"../../common/MyRadioBtn\"\nimport MyHttp from \"../../helper/MyHttp\"\n\nconst CreateAdmin = () => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [role, setRole] = useState('admin')\n    const [error, setError] = useState('')\n    const [message, setMessage] = useState('')\n\n    async function postData(e: FormEvent<HTMLFormElement>) {\n        e.preventDefault()\n        setMessage('')\n        setError('')\n        if (username.trim() === '' && password.trim() === '' && role.trim() === '') {\n            setError(\"Enter all details\")\n            return\n        }\n        const data: AdminI = {\n            username,\n            password,\n            role\n        }\n        const res = await MyHttp.post(\"/api/login/create\", data)\n        if (res.status == 200) {\n            setMessage('Added successfully.')\n            setUsername('')\n            setPassword('')\n            setRole('admin')\n        } else {\n            const error: string = res.data.message\n            if (!error) {\n                setError('Error')\n                return\n            }\n            setError(error)\n        }\n    }\n    return (\n        <React.Fragment>\n            <MyNavBar />\n            <div className=\"container\">\n                <div className=\"jumbotron\">\n                    <form onSubmit={postData}>\n                        <h1>Add Admin</h1>\n                        <MyInput value={username} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUsername(e.currentTarget.value)} label=\"Username\" />\n                        <MyInput value={password} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value)} label=\"Password\" />\n                        <p>Role:</p>\n                        <MyRadioBtn name=\"role\" onChange={(e:  React.ChangeEvent<HTMLInputElement>) => setRole(e.currentTarget.value)} label=\"Admin\" value=\"admin\" checked={(role === \"admin\")} />\n                        <MyRadioBtn name=\"role\" onChange={(e:  React.ChangeEvent<HTMLInputElement>) => setRole(e.currentTarget.value)} label=\"Sub-Admin\" value=\"sub-admin\"  checked={(role === \"sub-admin\")}/>\n                        <br />\n                        <br />\n                        <button className=\"btn btn-success\" type=\"submit\">Submit</button>\n    <p className=\"text-danger\">{error}</p>\n    <p className=\"text-success\">{message}</p>\n                    </form>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default CreateAdmin","import React from \"react\"\nimport MyNavBar from \"../common/MyNavBar\"\n\nconst Home = () => {\n  return (\n      <React.Fragment>\n          <MyNavBar />\n          <div className=\"container\">\n          <div className=\"jumbotron\">\n\n            <p>H ome</p>\n          </div>\n      </div>\n      </React.Fragment>\n      \n  )\n}\n\nexport default Home","import React, { useEffect } from \"react\"\nimport { Redirect } from \"react-router-dom\"\n\nconst Logout = () => {\n    useEffect(() => {\n        localStorage.removeItem(\"token\")\n\n    })\n\n  return (\n      <Redirect to=\"/\"/>      \n  )\n}\n\nexport default Logout","import React, { useEffect, useState } from \"react\"\nimport MyNavBar from \"../../common/MyNavBar\"\nimport MyHttp from \"../../helper/MyHttp\"\nimport { AdminI } from \"./admin-interfaces\"\n\nconst ViewAdmin = () => {\n\n    const [data, setData] = useState([])\n    const [error, setError] = useState()\n\n    async function getData() {\n        try {\n            const res = await MyHttp.get(\"/api/login\")\n\n            if (res.status === 200) {\n                console.log(res.data);\n                setData(res.data)\n            }\n        } catch (error) {\n            console.log(error.message);\n\n            setError(error.message)\n        }\n    }\n\n    function renderData() {\n        const out = data.map((d: AdminI) => {\n            return (\n                <tr key={d.id!}>\n                    <td>{d.id! + 1}</td>\n                    <td>{d.username}</td>\n                    <td>{d.role}</td>\n                    <td><button className=\"btn btn-warning\">Edit</button></td>\n                </tr>\n            )\n        })\n        return out\n    }\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n    return (\n        <React.Fragment>\n            <MyNavBar />\n            <div className=\"container\">\n                <div className=\"jumbotron\">\n                    <h1>View/Edit</h1>\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">First</th>\n                                <th scope=\"col\">Role</th>\n                                <th scope=\"col\">Edit</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {renderData()}\n                        </tbody>\n                    </table>\n                </div>\n                <p className=\"text-danger\">{error}</p>\n            </div>\n        </React.Fragment>\n\n    )\n}\n\nexport default ViewAdmin","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './components/pages/login';\nimport CreateAdmin from './components/pages/admin/create-admin';\nimport Home from './components/pages/home';\nimport Logout from './components/pages/logout';\nimport ViewAdmin from './components/pages/admin/view-admin';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Login} />\n      <Route exact path=\"/home\" component={Home} />\n      <Route exact path=\"/logout\" component={Logout} />\n      <Route exact path=\"/admin/create\" component={CreateAdmin} />\n      <Route exact path=\"/admin/view\" component={ViewAdmin} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}